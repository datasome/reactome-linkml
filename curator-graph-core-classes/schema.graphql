type AbstractModifiedResidue implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    className: String
    created: InstanceEdit
    explanation: String
    isLoaded: Boolean
    modified: InstanceEdit
    preventLazyLoading: Boolean
    referenceSequence: ReferenceSequence!
    stableIdentifier: StableIdentifier
}


type Affiliation implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    address: String
    className: String
    created: InstanceEdit
    explanation: String
    isLoaded: Boolean
    modified: InstanceEdit
    name: [String!]!
    preventLazyLoading: Boolean
    stableIdentifier: StableIdentifier
}


type Anatomy
{
    definition: String
    identifier: String!
    instanceOf: [ExternalOntology]
    name: [String!]!
    referenceDatabase: ReferenceDatabase!
    synonym: [String]
}


"""
Shortcut reactions that make the connection between input and output, but don't provide complete mechanistic detail. Used for reactions that do not balance, or complicated processes for which we either don't know all the details, or we choose not to represent every step. (e.g. degradation of a protein)
"""
type BlackBoxEvent
{
    authored: [InstanceEdit]
    catalystActivity: [CatalystActivity]
    catalystActivityReference: CatalystActivityReference
    className: String
    compartment: [Compartment]
    edited: [InstanceEdit]
    entityFunctionalStatus: [EntityFunctionalStatus]
    entityOnOtherCell: [PhysicalEntity]
    explanation: String
    goBiologicalProcess: GO_BiologicalProcess
    hasInteraction: [InteractionEvent]
    input: [Input]
    isChimeric: Boolean
    literatureReference: [Publication]
    normalReaction: ReactionlikeEvent
    output: [Output]
    reactionType: [ReactionType]
    regulatedBy: [Regulation]
    regulationReference: [RegulationReference]
    requiredInputComponent: [PhysicalEntity]
    systematicName: String
    templateEvent: Event
}


type Book
{
    ISBN: String
    author: [PublicationAuthor!]!
    chapterAuthors: [Person]
    chapterTitle: String
    pages: String
    publisher: Affiliation
    title: String!
    year: Int!
}


"""
A set of entities that are interchangeable in function, with two subclasses, members that are hypothetical and members that have been demonstrated. Hypothetical members are identified as values of the hasCandidate slot. Members that have been demonstrated are identified in the hasMember slot. At least one hasCandidate value is required; hasMember values are optional
"""
type CandidateSet
{
    className: String
    compartment: Compartment!
    explanation: String
    hasCandidate: [HasCandidate!]!
    hasMember: [HasMember]
    isOrdered: Boolean
    relatedSpecies: [Species]
    species: [Species]
}


type CatalystActivity implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    activeUnit: [PhysicalEntity]
    activity: GO_MolecularFunction
    className: String
    created: InstanceEdit
    explanation: String
    isLoaded: Boolean
    modified: InstanceEdit
    physicalEntity: PhysicalEntity!
    preventLazyLoading: Boolean
    stableIdentifier: StableIdentifier
}


type CatalystActivityReference
{
    catalystActivity: CatalystActivity!
    literatureReference: [Publication!]!
}


type Cell
{
    RNAMarker: [EntityWithAccessionedSequence]
    authored: InstanceEdit
    cellType: [CellType!]!
    crossReference: [DatabaseIdentifier]
    definition: String
    disease: [Disease]
    edited: [InstanceEdit]
    figure: [Figure]
    goCellularComponent: GO_CellularComponent
    inferredFrom: [PhysicalEntity]
    inferredTo: [PhysicalEntity]
    literatureReference: [Publication]
    markerReference: [MarkerReference]
    name: [String!]!
    organ: Anatomy
    proteinMarker: [PhysicalEntity]
    reviewed: [InstanceEdit]
    revised: [InstanceEdit]
    species: [Taxon!]!
    summation: [Summation]
    systematicName: String
    tissue: Anatomy!
    tissueLayer: Anatomy
}


type CellDevelopmentStep
{
    catalystActivity: [CatalystActivity]
    catalystActivityReference: CatalystActivityReference
    className: String
    compartment: [Compartment]
    entityFunctionalStatus: [EntityFunctionalStatus]
    entityOnOtherCell: [PhysicalEntity]
    hasInteraction: [InteractionEvent]
    input: [Input!]!
    isChimeric: Boolean
    normalReaction: ReactionlikeEvent
    output: [Output!]!
    reactionType: [ReactionType]
    regulatedBy: [Regulation]
    regulationReference: [RegulationReference]
    requiredInputComponent: [PhysicalEntity]
    systematicName: String
    tissue: Anatomy
}


type CellLineagePath
{
    authored: [InstanceEdit]
    compartment: [Compartment]
    doi: String
    edited: [InstanceEdit]
    explanation: String
    goBiologicalProcess: GO_BiologicalProcess
    hasEHLD: Boolean
    hasEvent: [HasEvent!]!
    isCanonical: Boolean
    normalPathway: Pathway
    tissue: Anatomy
}


type CellType
{
    definition: String
    identifier: String!
    instanceOf: [ExternalOntology]
    name: [String!]!
    referenceDatabase: ReferenceDatabase!
    synonym: [String]
}


type ChemicalDrug
{
    compartment: [Compartment!]!
    disease: [Disease!]!
    referenceEntity: ReferenceTherapeutic!
}


type Compartment
{
    accession: String!
    componentOf: [GO_CellularComponent]
    definition: String
    hasPart: [GO_CellularComponent]
    instanceOf: [GO_CellularComponent]
    name: [String!]!
    referenceDatabase: ReferenceDatabase!
    surroundedBy: [GO_CellularComponent]
}


"""
An entity formed by the association of two or more component entities (these components can themselves be complexes). At least one component must be specified. Complexes represent all experimentally verified components and their stoichiometry where this is known but may not include as yet unidentified components
"""
type Complex
{
    authored: InstanceEdit
    cellType: [CellType!]!
    compartment: Compartment!
    crossReference: [DatabaseIdentifier]
    definition: String
    disease: [Disease]
    edited: [InstanceEdit]
    entityOnOtherCell: [PhysicalEntity]
    explanation: String
    figure: [Figure]
    goCellularComponent: GO_CellularComponent
    hasComponent: [HasComponent!]!
    includedLocation: [HasCompartment]
    inferredFrom: [PhysicalEntity]
    inferredTo: [PhysicalEntity]
    isChimeric: Boolean
    literatureReference: [Publication]
    name: [String!]!
    relatedSpecies: [Species]
    reviewed: [InstanceEdit]
    revised: [InstanceEdit]
    species: [Species]
    stoichiometryKnown: Boolean
    summation: [Summation]
    systematicName: String
}


type ControlledVocabulary implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    className: String
    created: InstanceEdit
    definition: String
    explanation: String
    isLoaded: Boolean
    modified: InstanceEdit
    name: [String!]!
    preventLazyLoading: Boolean
    stableIdentifier: StableIdentifier
}


type ControlReference implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    className: String
    created: InstanceEdit
    explanation: String
    isLoaded: Boolean
    literatureReference: [Publication!]!
    modified: InstanceEdit
    preventLazyLoading: Boolean
    stableIdentifier: StableIdentifier
}


type CrosslinkedResidue
{
    coordinate: Int
    modification: DatabaseObject
    psiMod: PsiMod!
    secondCoordinate: Int
}


type DatabaseIdentifier implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    className: String
    created: InstanceEdit
    crossReference: [DatabaseIdentifier]
    explanation: String
    identifier: String!
    isLoaded: Boolean
    modified: InstanceEdit
    preventLazyLoading: Boolean
    referenceDatabase: ReferenceDatabase!
    stableIdentifier: StableIdentifier
}


"""
Not available
"""
interface DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    className: String
    created: InstanceEdit
    explanation: String
    isLoaded: Boolean
    modified: InstanceEdit
    preventLazyLoading: Boolean
    stableIdentifier: StableIdentifier
}


type DBInfo
{
    checksum: Int
    id: ID!
    name: String
    version: Int
}


"""
Two or more entities that are interchangeable in function
"""
type DefinedSet
{
    className: String
    compartment: Compartment!
    explanation: String
    hasMember: [HasMember!]!
    isOrdered: Boolean
    relatedSpecies: [Species]
    species: [Species]
}


type _Deleted implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    className: String
    created: InstanceEdit
    curatorComment: String
    deletedInstance: [_DeletedInstance]
    deletedInstanceDB_ID: [Int]
    explanation: String
    isLoaded: Boolean
    modified: InstanceEdit
    preventLazyLoading: Boolean
    reason: DeletedControlledVocabulary
    replacementInstances: [DatabaseObject]
    stableIdentifier: StableIdentifier
}


type DeletedControlledVocabulary
{
    definition: String
    name: [String!]!
}


type _DeletedInstance implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    className: String
    created: InstanceEdit
    deletedInstanceDB_ID: Int
    deletedStableIdentifier: StableIdentifier
    explanation: String
    isLoaded: Boolean
    modified: InstanceEdit
    name: String
    preventLazyLoading: Boolean
    species: [Taxon]
    stableIdentifier: StableIdentifier
}


type Depolymerisation
{
    authored: [InstanceEdit]
    catalystActivity: [CatalystActivity]
    catalystActivityReference: CatalystActivityReference
    className: String
    compartment: [Compartment]
    edited: [InstanceEdit]
    entityFunctionalStatus: [EntityFunctionalStatus]
    entityOnOtherCell: [PhysicalEntity]
    goBiologicalProcess: GO_BiologicalProcess
    hasInteraction: [InteractionEvent]
    input: [Input!]!
    isChimeric: Boolean
    literatureReference: [Publication]
    normalReaction: ReactionlikeEvent
    output: [Output!]!
    reactionType: [ReactionType]
    regulatedBy: [Regulation]
    regulationReference: [RegulationReference]
    requiredInputComponent: [PhysicalEntity]
    systematicName: String
}


type Disease
{
    definition: String
    identifier: String!
    instanceOf: [ExternalOntology]
    name: [String!]!
    referenceDatabase: ReferenceDatabase!
    synonym: [String]
}


type Drug
{
    authored: InstanceEdit
    cellType: [CellType!]!
    compartment: [Compartment!]!
    crossReference: [DatabaseIdentifier]
    definition: String
    disease: [Disease!]!
    edited: [InstanceEdit]
    figure: [Figure]
    goCellularComponent: GO_CellularComponent
    inferredFrom: [PhysicalEntity]
    inferredTo: [PhysicalEntity]
    literatureReference: [Publication]
    name: [String!]!
    referenceEntity: ReferenceTherapeutic!
    reviewed: [InstanceEdit]
    revised: [InstanceEdit]
    summation: [Summation]
    systematicName: String
}


type DrugActionType
{
    instanceOf: [DrugActionType]
}


type EntityFunctionalStatus implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    className: String
    created: InstanceEdit
    diseaseEntity: PhysicalEntity!
    explanation: String
    functionalStatus: [FunctionalStatus!]!
    isLoaded: Boolean
    modified: InstanceEdit
    normalEntity: PhysicalEntity
    preventLazyLoading: Boolean
    stableIdentifier: StableIdentifier
}


"""
Two or more entities grouped because of a shared molecular feature. The superclass for CandidateSet and DefinedSet
"""
type EntitySet
{
    authored: InstanceEdit
    cellType: [CellType!]!
    className: String
    compartment: Compartment!
    crossReference: [DatabaseIdentifier]
    definition: String
    disease: [Disease]
    edited: [InstanceEdit]
    explanation: String
    figure: [Figure]
    goCellularComponent: GO_CellularComponent
    hasMember: [HasMember!]!
    inferredFrom: [PhysicalEntity]
    inferredTo: [PhysicalEntity]
    isOrdered: Boolean
    literatureReference: [Publication]
    name: [String!]!
    relatedSpecies: [Species]
    reviewed: [InstanceEdit]
    revised: [InstanceEdit]
    species: [Species]
    summation: [Summation]
    systematicName: String
}


"""
A protein, RNA, or DNA molecule or fragment thereof in a specified cellular compartment and specific post-translational state. Must be linked to an external database reference, given as the value of referenceSequence. An EWAS typically corresponds to the entire protein or polynucleotide described in the external database. Fragments are defined by setting the first and last residue using the numbering scheme of the external database, entered as startCoordinate and endCoordinate values. Values of 1 and -1 respectively indicate that the true start and end are unconfirmed. EWAS instances are specific to a subcellular compartment; if the same molecule is found in two cellular components it will have two EWASes. EWAS instances by default define an unmodified protein sequence, any post-translational modification (PTM), such as phosphorylation, requires a new EWAS instance. The location and type of any PTM are defined in the hasModifiedResidue slot
"""
type EntityWithAccessionedSequence
{
    className: String
    compartment: [Compartment!]!
    endCoordinate: Int
    explanation: String
    hasModifiedResidue: [HasModifiedResidue]
    name: [String!]!
    referenceEntity: ReferenceSequence!
    species: Taxon!
    startCoordinate: Int
}


type Event implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _doRelease: Boolean
    _timestamp: String
    authored: [InstanceEdit]
    className: String
    created: InstanceEdit
    crossReference: [DatabaseIdentifier]
    definition: String
    disease: [Disease]
    edited: [InstanceEdit]
    evidenceType: EvidenceType
    explanation: String
    figure: [Figure]
    goBiologicalProcess: GO_BiologicalProcess
    inferredFrom: [Event]
    isLoaded: Boolean
    literatureReference: [Publication]
    modified: InstanceEdit
    name: [String!]!
    negativePrecedingEvent: [NegativePrecedingEvent]
    orthologousEvent: [Event]
    precedingEvent: [Event]
    preventLazyLoading: Boolean
    relatedSpecies: [Species]
    releaseDate: String!
    releaseStatus: String
    reviewed: [InstanceEdit]
    revised: [InstanceEdit]
    species: [Species!]!
    stableIdentifier: StableIdentifier
    summation: [Summation!]!
}


type EvidenceType implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    className: String
    created: InstanceEdit
    definition: String
    explanation: String
    instanceOf: [EvidenceType]
    isLoaded: Boolean
    modified: InstanceEdit
    name: [String!]!
    preventLazyLoading: Boolean
    stableIdentifier: StableIdentifier
}


type ExternalOntology implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    className: String
    created: InstanceEdit
    definition: String
    explanation: String
    identifier: String!
    instanceOf: [ExternalOntology]
    isLoaded: Boolean
    modified: InstanceEdit
    name: [String!]!
    preventLazyLoading: Boolean
    referenceDatabase: ReferenceDatabase!
    stableIdentifier: StableIdentifier
    synonym: [String]
}


"""
Defines an event where genetic mutations in the nucleotide sequence produces a protein with a very little or no activity. The consequence of this is that substrates are not converted to products and can therefore build up to cause pathological conditions. It could also mean entities are not moved between compartments again causing imbalances in entity concentrations which can lead to pathological conditions.
"""
type FailedReaction
{
    authored: [InstanceEdit]
    catalystActivity: [CatalystActivity]
    catalystActivityReference: CatalystActivityReference
    className: String
    compartment: [Compartment]
    edited: [InstanceEdit]
    entityFunctionalStatus: [EntityFunctionalStatus]
    entityOnOtherCell: [PhysicalEntity]
    explanation: String
    goBiologicalProcess: GO_BiologicalProcess
    hasInteraction: [InteractionEvent]
    input: [Input!]!
    isChimeric: Boolean
    literatureReference: [Publication]
    normalReaction: ReactionlikeEvent!
    output: [Output]
    reactionType: [ReactionType]
    regulatedBy: [Regulation]
    regulationReference: [RegulationReference]
    requiredInputComponent: [PhysicalEntity]
    systematicName: String
}


type Figure implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    className: String
    created: InstanceEdit
    explanation: String
    isLoaded: Boolean
    modified: InstanceEdit
    preventLazyLoading: Boolean
    stableIdentifier: StableIdentifier
    url: String!
}


type FragmentDeletionModification
{
    endPositionInReferenceSequence: Int!
    startPositionInReferenceSequence: Int!
}


type FragmentInsertionModification
{
    coordinate: Int
    endPositionInReferenceSequence: Int!
    startPositionInReferenceSequence: Int!
}


type FragmentModification
{
    endPositionInReferenceSequence: Int!
    startPositionInReferenceSequence: Int!
}


type FragmentReplacedModification
{
    alteredAminoAcidFragment: String
    endPositionInReferenceSequence: Int!
    startPositionInReferenceSequence: Int!
}


type FrontPage implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    className: String
    created: InstanceEdit
    explanation: String
    frontPageItem: [Event!]!
    isLoaded: Boolean
    modified: InstanceEdit
    preventLazyLoading: Boolean
    stableIdentifier: StableIdentifier
}


type FunctionalStatus implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    className: String
    created: InstanceEdit
    explanation: String
    functionalStatusType: FunctionalStatusType!
    isLoaded: Boolean
    modified: InstanceEdit
    preventLazyLoading: Boolean
    stableIdentifier: StableIdentifier
    structuralVariant: SequenceOntology!
}


type FunctionalStatusType implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    className: String
    created: InstanceEdit
    definition: String
    explanation: String
    isLoaded: Boolean
    modified: InstanceEdit
    name: [String!]!
    preventLazyLoading: Boolean
    stableIdentifier: StableIdentifier
}


type GeneticallyModifiedResidue
{
    referenceSequence: ReferenceSequence!
}


"""
A peptide or polynucleotide whose sequence is unknown and thus cannot be linked to external sequence databases or used for orthology inference
"""
type GenomeEncodedEntity
{
    authored: InstanceEdit
    cellType: [CellType!]!
    className: String
    compartment: [Compartment!]!
    crossReference: [DatabaseIdentifier]
    definition: String
    disease: [Disease]
    edited: [InstanceEdit]
    explanation: String
    figure: [Figure]
    goCellularComponent: GO_CellularComponent
    inferredFrom: [PhysicalEntity]
    inferredTo: [PhysicalEntity]
    literatureReference: [Publication]
    name: [String!]!
    reviewed: [InstanceEdit]
    revised: [InstanceEdit]
    species: Taxon!
    summation: [Summation]
    systematicName: String
}


type GO_BiologicalProcess implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    accession: String!
    className: String
    created: InstanceEdit
    definition: String
    explanation: String
    isLoaded: Boolean
    modified: InstanceEdit
    name: [String!]!
    preventLazyLoading: Boolean
    referenceDatabase: ReferenceDatabase!
    stableIdentifier: StableIdentifier
}


type GO_CellularComponent implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    accession: String!
    className: String
    componentOf: [GO_CellularComponent]
    created: InstanceEdit
    definition: String
    explanation: String
    hasPart: [GO_CellularComponent]
    instanceOf: [GO_CellularComponent]
    isLoaded: Boolean
    modified: InstanceEdit
    name: [String!]!
    preventLazyLoading: Boolean
    referenceDatabase: ReferenceDatabase!
    stableIdentifier: StableIdentifier
    surroundedBy: [GO_CellularComponent]
}


type GO_MolecularFunction implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    accession: String!
    className: String
    created: InstanceEdit
    definition: String
    ecNumber: String
    explanation: String
    isLoaded: Boolean
    modified: InstanceEdit
    name: [String!]!
    preventLazyLoading: Boolean
    referenceDatabase: ReferenceDatabase!
    stableIdentifier: StableIdentifier
}


type GroupModifiedResidue
{
    coordinate: Int
    modification: DatabaseObject!
    psiMod: PsiMod!
}


type HasCandidate
{
    id: ID!
    order: Int
    physicalEntity: PhysicalEntity
    stoichiometry: Int
}


type HasCompartment
{
    compartment: Compartment
    id: ID!
    order: Int
}


type HasComponent
{
    id: ID!
    order: Int
    physicalEntity: PhysicalEntity
    stoichiometry: Int
}


type HasEncapsulatedEvent
{
    event: Event
    id: ID!
    order: Int
}


type HasEvent
{
    event: Event
    id: ID!
    order: Int
    stoichiometry: Int
}


type HasMember
{
    id: ID!
    order: Int
    physicalEntity: PhysicalEntity
    stoichiometry: Int
}


type HasModifiedResidue
{
    abstractModifiedResidue: AbstractModifiedResidue
    id: ID!
    order: Int
    stoichiometry: Int
}


type Input
{
    id: ID!
    order: Int
    physicalEntity: PhysicalEntity
    stoichiometry: Int
}


type InstanceEdit implements DatabaseObject
{
    DB_ID: ID!
    _applyToAllEditedInstances: String
    _displayName: String
    _timestamp: String
    author: [Person]
    className: String
    created: InstanceEdit
    dateTime: String
    explanation: String
    isLoaded: Boolean
    modified: InstanceEdit
    note: String
    preventLazyLoading: Boolean
    stableIdentifier: StableIdentifier
}


type InteractionEvent
{
    _doRelease: Boolean
    authored: [InstanceEdit]
    crossReference: [DatabaseIdentifier]
    definition: String
    disease: [Disease]
    edited: [InstanceEdit]
    evidenceType: EvidenceType
    figure: [Figure]
    goBiologicalProcess: GO_BiologicalProcess
    inferredFrom: [Event]
    literatureReference: [Publication]
    name: [String!]!
    negativePrecedingEvent: [NegativePrecedingEvent]
    orthologousEvent: [Event]
    partners: [PhysicalEntity!]!
    precedingEvent: [Event]
    relatedSpecies: [Species]
    releaseDate: String!
    releaseStatus: String
    reviewed: [InstanceEdit]
    revised: [InstanceEdit]
    species: [Species!]!
    summation: [Summation!]!
}


type InterChainCrosslinkedResidue
{
    equivalentTo: [InterChainCrosslinkedResidue!]!
    modification: DatabaseObject
    secondCoordinate: Int
    secondReferenceSequence: [ReferenceSequence!]!
}


type IntraChainCrosslinkedResidue
{
    modification: DatabaseObject
    secondCoordinate: Int
}


type LiteratureReference
{
    PUBMED_URL: String
    author: [PublicationAuthor!]!
    journal: String
    pages: String
    pubMedIdentifier: Int
    title: String!
    volume: Int
    year: Int!
}


type MarkerReference
{
    literatureReference: [Publication!]!
    marker: [EntityWithAccessionedSequence!]!
}


type ModifiedNucleotide
{
    coordinate: Int!
    modification: DatabaseObject!
}


type ModifiedResidue
{
    coordinate: Int
    psiMod: PsiMod!
}


"""
A negative gene expression regulation
"""
type NegativeGeneExpressionRegulation
{
    explanation: String
}


type NegativePrecedingEvent implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    className: String
    comment: String
    created: InstanceEdit
    explanation: String
    isLoaded: Boolean
    modified: InstanceEdit
    precedingEvent: [Event!]!
    preventLazyLoading: Boolean
    reason: NegativePrecedingEventReason
    stableIdentifier: StableIdentifier
}


type NegativePrecedingEventReason
{
    definition: String
    name: [String!]!
}


"""
This describes an Event/CatalystActivity that is negatively regulated by the Regulator (e.g., allosteric inhibition, competitive inhibition
"""
type NegativeRegulation
{
    activeUnit: [PhysicalEntity]
    activity: GO_MolecularFunction
    explanation: String
    goBiologicalProcess: GO_BiologicalProcess
    regulator: PhysicalEntity!
    summation: [Summation]
}


type NonsenseMutation
{
    coordinate: Int
    psiMod: [PsiMod!]!
}


"""
Entities that we are unable or unwilling to describe in chemical detail and cannot be put in any other class. Can be used to represent complex structures in the cell that take part in a reaction but which we cannot or do not want to define molecularly, e.g. cell membrane, Holliday structure
"""
type OtherEntity
{
    authored: InstanceEdit
    cellType: [CellType!]!
    compartment: [Compartment!]!
    crossReference: [DatabaseIdentifier]
    definition: String
    disease: [Disease]
    edited: [InstanceEdit]
    explanation: String
    figure: [Figure]
    goCellularComponent: GO_CellularComponent
    inferredFrom: [PhysicalEntity]
    inferredTo: [PhysicalEntity]
    literatureReference: [Publication]
    name: [String!]!
    reviewed: [InstanceEdit]
    revised: [InstanceEdit]
    summation: [Summation]
    systematicName: String
}


type Output
{
    id: ID!
    order: Int
    physicalEntity: PhysicalEntity
    stoichiometry: Int
}


"""
A collection of related Events. These events can be ReactionLikeEvents or Pathways
"""
type Pathway
{
    _doRelease: Boolean
    authored: [InstanceEdit]
    compartment: [Compartment]
    crossReference: [DatabaseIdentifier]
    definition: String
    disease: [Disease]
    doi: String
    edited: [InstanceEdit]
    evidenceType: EvidenceType
    explanation: String
    figure: [Figure]
    goBiologicalProcess: GO_BiologicalProcess
    hasEHLD: Boolean
    hasEvent: [HasEvent!]!
    inferredFrom: [Event]
    isCanonical: Boolean
    literatureReference: [Publication]
    name: [String!]!
    negativePrecedingEvent: [NegativePrecedingEvent]
    normalPathway: Pathway
    orthologousEvent: [Event]
    precedingEvent: [Event]
    relatedSpecies: [Species]
    releaseDate: String!
    releaseStatus: String
    reviewed: [InstanceEdit]
    revised: [InstanceEdit]
    species: [Species!]!
    summation: [Summation!]!
}


type PathwayDiagram implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    className: String
    created: InstanceEdit
    explanation: String
    height: Int
    isLoaded: Boolean
    modified: InstanceEdit
    preventLazyLoading: Boolean
    representedPathway: [RepresentedPathway!]!
    stableIdentifier: StableIdentifier
    storedATXML: String
    width: Int
}


type Person implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    affiliation: [Affiliation]
    className: String
    created: InstanceEdit
    crossReference: [DatabaseIdentifier]
    explanation: String
    figure: [Figure]
    firstname: String
    initial: String!
    isLoaded: Boolean
    modified: InstanceEdit
    preventLazyLoading: Boolean
    project: String
    stableIdentifier: StableIdentifier
    surname: String!
    url: String
}


type PhysicalEntity implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    authored: InstanceEdit
    cellType: [CellType!]!
    className: String
    created: InstanceEdit
    crossReference: [DatabaseIdentifier]
    definition: String
    disease: [Disease]
    edited: [InstanceEdit]
    explanation: String
    figure: [Figure]
    goCellularComponent: GO_CellularComponent
    inferredFrom: [PhysicalEntity]
    inferredTo: [PhysicalEntity]
    isLoaded: Boolean
    literatureReference: [Publication]
    modified: InstanceEdit
    name: [String!]!
    preventLazyLoading: Boolean
    reviewed: [InstanceEdit]
    revised: [InstanceEdit]
    stableIdentifier: StableIdentifier
    summation: [Summation]
    systematicName: String
}


"""
Molecules that consist of an indeterminate number of repeated units. Includes complexes whose stoichiometry is variable or unknown. The repeated unit(s) is(are) identified in the repeatedUnit slot
"""
type Polymer
{
    authored: InstanceEdit
    cellType: [CellType!]!
    compartment: [Compartment!]!
    crossReference: [DatabaseIdentifier]
    definition: String
    disease: [Disease]
    edited: [InstanceEdit]
    explanation: String
    figure: [Figure]
    goCellularComponent: GO_CellularComponent
    inferredFrom: [PhysicalEntity]
    inferredTo: [PhysicalEntity]
    literatureReference: [Publication]
    maxUnitCount: Int
    minUnitCount: Int
    name: [String!]!
    repeatedUnit: [RepeatedUnit!]!
    reviewed: [InstanceEdit]
    revised: [InstanceEdit]
    species: [Species]
    summation: [Summation]
    systematicName: String
}


"""
Reactions that follow the pattern: Polymer + Unit -> Polymer (there may be a catalyst involved). Used to describe the mechanistic detail of a polymerisation
"""
type Polymerisation
{
    authored: [InstanceEdit]
    catalystActivity: [CatalystActivity]
    catalystActivityReference: CatalystActivityReference
    className: String
    compartment: [Compartment]
    edited: [InstanceEdit]
    entityFunctionalStatus: [EntityFunctionalStatus]
    entityOnOtherCell: [PhysicalEntity]
    explanation: String
    goBiologicalProcess: GO_BiologicalProcess
    hasInteraction: [InteractionEvent]
    input: [Input!]!
    isChimeric: Boolean
    literatureReference: [Publication]
    normalReaction: ReactionlikeEvent
    output: [Output!]!
    reactionType: [ReactionType]
    regulatedBy: [Regulation]
    regulationReference: [RegulationReference]
    requiredInputComponent: [PhysicalEntity]
    systematicName: String
}


"""
A positive gene expression regulation
"""
type PositiveGeneExpressionRegulation
{
    explanation: String
}


"""
This describes an Event/CatalystActivity that is positively regulated by the Regulator (e.g., allosteric activation)
"""
type PositiveRegulation
{
    activeUnit: [PhysicalEntity]
    activity: GO_MolecularFunction
    explanation: String
    goBiologicalProcess: GO_BiologicalProcess
    regulator: PhysicalEntity!
    summation: [Summation]
}


type ProteinDrug
{
    compartment: [Compartment!]!
    disease: [Disease!]!
    referenceEntity: ReferenceTherapeutic!
}


type PsiMod
{
    definition: String
    identifier: String!
    instanceOf: [ExternalOntology]
    label: String
    name: [String!]!
    referenceDatabase: ReferenceDatabase!
    synonym: [String]
}


type Publication implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    author: [PublicationAuthor!]!
    className: String
    created: InstanceEdit
    explanation: String
    isLoaded: Boolean
    modified: InstanceEdit
    preventLazyLoading: Boolean
    stableIdentifier: StableIdentifier
    title: String!
}


type PublicationAuthor
{
    author: Person
    id: ID!
    order: Int
}


"""
Defines a change of state for one or more molecular entities. Most reactions in Reactome involve either a) the interaction of entities to form a complex, or b) the movement of entities between compartments, or c) the chemical conversion of entities as part of a metabolic process. Reactions have a molecular balance between input and output entities
"""
type Reaction
{
    authored: [InstanceEdit]
    catalystActivity: [CatalystActivity]
    catalystActivityReference: CatalystActivityReference
    className: String
    compartment: [Compartment]
    edited: [InstanceEdit]
    entityFunctionalStatus: [EntityFunctionalStatus]
    entityOnOtherCell: [PhysicalEntity]
    explanation: String
    goBiologicalProcess: GO_BiologicalProcess
    hasInteraction: [InteractionEvent]
    input: [Input!]!
    isChimeric: Boolean
    literatureReference: [Publication]
    normalReaction: ReactionlikeEvent
    output: [Output!]!
    reactionType: [ReactionType]
    regulatedBy: [Regulation]
    regulationReference: [RegulationReference]
    requiredInputComponent: [PhysicalEntity]
    reverseReaction: Reaction
    systematicName: String
}


type ReactionlikeEvent
{
    _doRelease: Boolean
    authored: [InstanceEdit]
    catalystActivity: [CatalystActivity]
    catalystActivityReference: CatalystActivityReference
    className: String
    compartment: [Compartment]
    crossReference: [DatabaseIdentifier]
    definition: String
    disease: [Disease]
    edited: [InstanceEdit]
    entityFunctionalStatus: [EntityFunctionalStatus]
    entityOnOtherCell: [PhysicalEntity]
    evidenceType: EvidenceType
    figure: [Figure]
    goBiologicalProcess: GO_BiologicalProcess
    hasInteraction: [InteractionEvent]
    inferredFrom: [Event]
    input: [Input!]!
    isChimeric: Boolean
    literatureReference: [Publication]
    name: [String!]!
    negativePrecedingEvent: [NegativePrecedingEvent]
    normalReaction: ReactionlikeEvent
    orthologousEvent: [Event]
    output: [Output!]!
    precedingEvent: [Event]
    reactionType: [ReactionType]
    regulatedBy: [Regulation]
    regulationReference: [RegulationReference]
    relatedSpecies: [Species]
    releaseDate: String!
    releaseStatus: String
    requiredInputComponent: [PhysicalEntity]
    reviewed: [InstanceEdit]
    revised: [InstanceEdit]
    species: [Species!]!
    summation: [Summation!]!
    systematicName: String
}


type ReactionType
{
    definition: String
    name: [String!]!
}


type ReferenceDatabase implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    accessUrl: String!
    className: String
    created: InstanceEdit
    explanation: String
    isLoaded: Boolean
    modified: InstanceEdit
    name: [String]
    preventLazyLoading: Boolean
    resourceIdentifier: String
    stableIdentifier: StableIdentifier
    url: String!
}


type ReferenceDNASequence
{
    checksum: String
    comment: [String]
    description: [String]
    geneName: [String]
    isSequenceChanged: Boolean
    keyword: [String]
    otherIdentifier: [String]
    secondaryIdentifier: [String]
    sequenceLength: Int
    species: Species!
}


type ReferenceEntity implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    className: String
    created: InstanceEdit
    crossReference: [DatabaseIdentifier]
    explanation: String
    identifier: String!
    isLoaded: Boolean
    modified: InstanceEdit
    name: [String]
    otherIdentifier: [String]
    preventLazyLoading: Boolean
    referenceDatabase: ReferenceDatabase!
    stableIdentifier: StableIdentifier
}


type ReferenceGeneProduct
{
    _chainChangeLog: String
    chain: [String]
    checksum: String
    comment: [String]
    description: [String]
    geneName: [String]
    isSequenceChanged: Boolean
    keyword: [String]
    otherIdentifier: [String]
    referenceGene: [ReferenceDNASequence]
    referenceTranscript: [ReferenceRNASequence]
    secondaryIdentifier: [String]
    sequenceLength: Int
    species: Species!
}


type ReferenceGroup
{
    crossReference: [DatabaseIdentifier]
    formula: String
    identifier: String!
    name: [String!]!
    otherIdentifier: [String]
    referenceDatabase: ReferenceDatabase!
}


type ReferenceIsoform
{
    _chainChangeLog: String
    chain: [String]
    isoformParent: [ReferenceGeneProduct!]!
    referenceGene: [ReferenceDNASequence]
    referenceTranscript: [ReferenceRNASequence]
    variantIdentifier: String!
}


type ReferenceMolecule
{
    crossReference: [DatabaseIdentifier]
    formula: String
    identifier: String!
    name: [String!]!
    otherIdentifier: [String]
    referenceDatabase: ReferenceDatabase!
}


type ReferenceRNASequence
{
    checksum: String
    comment: [String]
    description: [String]
    geneName: [String]
    isSequenceChanged: Boolean
    keyword: [String]
    otherIdentifier: [String]
    referenceGene: [ReferenceDNASequence]
    secondaryIdentifier: [String]
    sequenceLength: Int
    species: Species!
}


type ReferenceSequence
{
    checksum: String
    comment: [String]
    crossReference: [DatabaseIdentifier]
    description: [String]
    geneName: [String]
    identifier: String!
    isSequenceChanged: Boolean
    keyword: [String]
    name: [String]
    otherIdentifier: [String]
    referenceDatabase: ReferenceDatabase!
    secondaryIdentifier: [String]
    sequenceLength: Int
    species: Species!
}


type ReferenceTherapeutic
{
    abbreviation: String
    activeDrugIds: [String]
    approvalSource: [String]
    approved: Boolean!
    crossReference: [DatabaseIdentifier]
    identifier: String!
    inn: String
    name: [String]
    otherIdentifier: [String]
    proDrugIds: [String]
    referenceDatabase: ReferenceDatabase!
    type: String
    withdrawn: Boolean
}


type Regulation implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    activeUnit: [PhysicalEntity]
    activity: GO_MolecularFunction
    className: String
    created: InstanceEdit
    explanation: String
    goBiologicalProcess: GO_BiologicalProcess
    isLoaded: Boolean
    modified: InstanceEdit
    preventLazyLoading: Boolean
    regulator: PhysicalEntity!
    stableIdentifier: StableIdentifier
    summation: [Summation]
}


type RegulationReference
{
    literatureReference: [Publication!]!
    regulation: Regulation!
}


type ReplacedResidue
{
    coordinate: Int
    psiMod: [PsiMod!]!
}


type _Release implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    className: String
    created: InstanceEdit
    explanation: String
    isLoaded: Boolean
    modified: InstanceEdit
    preventLazyLoading: Boolean
    releaseDate: String!
    releaseNumber: Int!
    stableIdentifier: StableIdentifier
}


type RepeatedUnit
{
    id: ID!
    order: Int
    physicalEntity: PhysicalEntity
    stoichiometry: Int
}


type RepresentedPathway
{
    id: ID!
    order: Int
    pathway: Pathway
    stoichiometry: Int
}


"""
A regulator that is required for an Event/CatalystActivity to happen
"""
type Requirement
{
    explanation: String
}


type RNADrug
{
    compartment: [Compartment!]!
    disease: [Disease!]!
    referenceEntity: ReferenceTherapeutic!
}


type SequenceOntology
{
    definition: String
    identifier: String!
    instanceOf: [ExternalOntology]
    name: [String!]!
    referenceDatabase: ReferenceDatabase!
    synonym: [String]
}


"""
A chemical species not encoded directly or indirectly in the genome, typically small molecules such as ATP or ethanol. The detailed structure of a simpleEntity is specified by linking it to details of the molecule in the ChEBI or KEGG databases via the referenceEntity slot. Use of KEGG is deprecated
"""
type SimpleEntity
{
    authored: InstanceEdit
    cellType: [CellType!]!
    className: String
    compartment: [Compartment!]!
    crossReference: [DatabaseIdentifier]
    definition: String
    disease: [Disease]
    edited: [InstanceEdit]
    explanation: String
    figure: [Figure]
    goCellularComponent: GO_CellularComponent
    inferredFrom: [PhysicalEntity]
    inferredTo: [PhysicalEntity]
    literatureReference: [Publication]
    name: [String!]!
    referenceEntity: ReferenceMolecule!
    reviewed: [InstanceEdit]
    revised: [InstanceEdit]
    species: Species
    summation: [Summation]
    systematicName: String
}


type Species
{
    abbreviation: String!
    crossReference: [DatabaseIdentifier!]!
    name: [String!]!
    superTaxon: Taxon
}


type StableIdentifier implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    className: String
    created: InstanceEdit
    explanation: String
    history: [StableIdentifierHistory]
    identifier: String
    identifierVersion: String
    isLoaded: Boolean
    modified: InstanceEdit
    oldIdentifier: String
    oldIdentifierVersion: String
    preventLazyLoading: Boolean
    released: Boolean
    stableIdentifier: StableIdentifier
}


type StableIdentifierHistory implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    className: String
    created: InstanceEdit
    explanation: String
    historyStatus: [StableIdentifierReleaseStatus]
    identifier: String
    identifierVersion: String
    isLoaded: Boolean
    modified: InstanceEdit
    preventLazyLoading: Boolean
    stableIdentifier: StableIdentifier
}


type StableIdentifierReleaseStatus implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    className: String
    created: InstanceEdit
    explanation: String
    isLoaded: Boolean
    modified: InstanceEdit
    preventLazyLoading: Boolean
    releaseNumber: Int
    stableIdentifier: StableIdentifier
    status: ReleaseStatus
}


type Summation implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    className: String
    created: InstanceEdit
    explanation: String
    isLoaded: Boolean
    literatureReference: [Publication]
    modified: InstanceEdit
    preventLazyLoading: Boolean
    stableIdentifier: StableIdentifier
    text: String!
}


type Taxon implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _timestamp: String
    className: String
    created: InstanceEdit
    crossReference: [DatabaseIdentifier!]!
    explanation: String
    isLoaded: Boolean
    modified: InstanceEdit
    name: [String!]!
    preventLazyLoading: Boolean
    stableIdentifier: StableIdentifier
    superTaxon: Taxon
}


type TranscriptionalModification
{
    referenceSequence: ReferenceSequence!
}


type TranslationalModification
{
    coordinate: Int
    psiMod: PsiMod!
    referenceSequence: ReferenceSequence!
}


type _UpdateTracker implements DatabaseObject
{
    DB_ID: ID!
    _displayName: String
    _release: _Release
    _timestamp: String
    action: [String]
    className: String
    created: InstanceEdit
    explanation: String
    isLoaded: Boolean
    modified: InstanceEdit
    preventLazyLoading: Boolean
    stableIdentifier: StableIdentifier
    updatedInstance: [DatabaseObject]
}


type URL
{
    author: [PublicationAuthor!]!
    title: String!
    uniformResourceLocator: String!
}

